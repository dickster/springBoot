package com.brovada.repository;

import com.brovada.document.QQuote;
import com.brovada.document.Quote;
import com.google.common.collect.Lists;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.querydsl.QueryDslPredicateExecutor;

import java.util.List;

public interface QuoteRepository extends MongoRepository<Quote, String>, QueryDslPredicateExecutor<Quote> {

    // methods automatically generated by spring data.
    // @see https://www.petrikainulainen.net/programming/spring-framework/spring-data-jpa-tutorial-creating-database-queries-from-method-names/

    public Quote findByFirstName(String firstName);
    public Quote findByFirstNameIgnoreCase(String firstName);
    public List<Quote> findByLastName(String lastName);
    public List<Quote> findByLastNameIgnoreCase(String lastName);

    // example of a refactor safe, coded query (as opposed to automatically generated ones above).
    default public List<Quote> findContains(String name) {
        QQuote quote = new QQuote("quote");

        Iterable<Quote> result = findAll(
                quote.firstName.containsIgnoreCase(name).
                or(quote.lastName.containsIgnoreCase(name))
        );
        return Lists.newArrayList(result);
    }

}
